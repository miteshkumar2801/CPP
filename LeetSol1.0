//1
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> map;
        vector<int> res;
        for (int i = 0; i< nums.size(); i++) {
            if (map.find(target - nums[i]) != map.end()) {
                res.push_back(map[target-nums[i]]);
                res.push_back(i);
               
                
            } else {
                map[nums[i]] = i;
            }
        }
        return res;
    }
};


//200
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        
        if (grid.size()  == 0 ) {
            return 0;
        }
        // No need to use discovered. Change the existing matrix.
        //vector<vector<int>> discovered(grid.size(), vector<int>(grid[0].size(),0));
        int totalIsl = 0;
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j< grid[i].size(); j++) {
                if (grid[i][j] == '1') {
                    helper(grid,totalIsl,i,j);  
                    totalIsl += 1;
                }

            }
        }
        return totalIsl;

    }
    
    void helper(vector<vector<char>> &grid, int &totalIsl, int i, int j) {
        if ( grid[i][j] == '1') {
            grid[i][j] = '#';
            //discovered[i][j] =1;
            //cout << grid[i][j];
            if (i+1 < grid.size())    {
                helper(grid,totalIsl, i+1,j);
            }
            if (j+1 < grid[0].size()) {
                helper(grid,totalIsl, i,j+1);
            }
            if (i-1 >= 0) { 
                helper(grid,totalIsl, i-1,j);
            }
            if (j-1 >= 0) { 
                helper(grid,totalIsl, i,j-1);
            }
        }
 

    }
};

//21
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode tmpNode = ListNode(0);
        ListNode* resHead = &tmpNode;
        ListNode* curr = resHead;
        
        while(1) {
            //cout << "Printing" << endl;
            //printLL(resHead);
            
            if (l1 == NULL) {
                curr->next = l2;
                return resHead->next;  
            } else if (l2 == NULL) {
                curr->next = l1;
                return resHead->next;
            } else {
                if (l1->val <= l2->val) {
                    curr->next = l1;
                    curr = curr->next;
                    l1 = l1->next;
                } else {
                    curr->next = l2;
                    curr = curr->next;
                    l2 = l2->next;
                }
            }
        }
        
        
    }
    
    void printLL(ListNode* LL) {
        while (LL != NULL) {
            cout << LL->val << endl;
            LL = LL->next;
        }
    }
};

//206
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* tmp = curr;
        
        while (curr != NULL) {
            tmp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = tmp;
            
        }
        
        return prev;
    }
    
    void printLL(ListNode* curr) {
        while (curr != NULL) {
            cout << curr->val << endl;
            curr = curr->next;
        }
    }
};

//215
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        //Min Heap creation
        //Runtime :: O((n-k)logk)
        priority_queue<int,vector<int>, greater<int>> pq(nums.begin(),nums.begin() + k);
        
        for (int i = k; i<nums.size(); i++) {
            if (nums[i] > pq.top()) {
                pq.pop();
                pq.push(nums[i]);
            }
        }
        
        return pq.top();
        
        
    }

};

//344
class Solution {
public:
    void reverseString(vector<char>& s) {
        int i =0;
        int j = s.size() -1 ;
        char tmp;
        
        while (i  < j) {
            //cout << i << endl;
            tmp = s[i];
            s[i] = s[j];
            s[j] = tmp;
            i += 1;
            j -= 1;
        }
        
       // return 0
       
    }
};

//283
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int i = 0;
        int j = 0;
        while (j < nums.size() && i<=j) {
            
            if (nums[i] != 0) {
                i += 1;
                j = i;
            } else {
                while (nums[j] == 0 && j < nums.size() -1) { 
                    j += 1;
                }
                if (nums[j] == 0 && j == nums.size()-1) {
                    //break;
                    break;
                   //return;
                }
                nums[i] = nums[j];
                nums[j] = 0;
                i +=1 ; 
                j = i;
            }
        }
        //return;
    }
};



